1. What is XmlDiff
2. Input and output description
3. Configure the output
4. Interpret the output



*********************
1. What is XmlDiff
*********************

XmlDiff is a Java library that gets the difference between two XML files in a "meaningful"/configurable way.

The configuration is optional and can be provided through an extra XML file. It is useful when
you want to reduce the output to only the data that you are interested in, or to make sure that
this important data is kept in the output after the comparison process.

Know limitations:
- can not process XML namespaces. To be introduced in the next release.

The source code is available at https://github.com/AlinaIoanaFlorea/XmlDiff.



**********************************
2. Input and output description
**********************************

XmlDiff expects as input the path of two XML files (plus if needed one more - the optional configuration file).
It will return the XML difference between these two files in StringBuilder format.


Example:

All input XML files must be valid XML files!

INPUT: old.xml new.xml config.xml
OUTPUT: xmlDiff

old.xml
- is the older version of the XML file to be compared
- is mandatory 

new.xml
- is the newer version of the XML file to be compared
- is mandatory

config.xml
- is the optional configuration file
- it can be used to specify which tags to be removed and/or kept from the output
- for more information check the configuration paragraph

xmlDiff
- is the XML difference (in StringBuilder format) produced by XmlDiff between the old.xml and new.xml
files 
- for more information check the paragraph about how to interpret the output



**************************
3. Configure the output
**************************

You can use these tags to configure the XmlDiff output:
- <toKeep>: list inside it the tags to be kept in the output even if they did not change
(else the tags that did not changed will not be part of the output as they don't represent 
a difference)
- <toRemove>: list inside it the tags to be removed from the output even if they changed

<toKeep> and <toRemove>:
- are optional
- if present they must use these exact names else their content will be ignored
- must apper inside the root tag of the configuration file so not inside any other tags
- can be present multiple times and their content will get accumulated
- <toKeep> has priority over what's inside <toRemove>, eg: if a tag <address> is listed inside
 both of these configuration tags, then <address> will be kept in the XmlDiff's output
- if a tag <address> has a child tag <city> then it's enough to specify only the <address> tag in
the configuration file, and all its child tags will have the same fate



Example: If the tags listed inside <toKeep> are part of a tag marked to be removed, eg <person>,
then they will be removed too. This will not happen if they are found outside the <person> tag:

<conf>
    <toKeep>
        <firstName></firstName>
        <lastName></lastName>
        <age></age>
    </toKeep>

    <toRemove>
        <person></person>
    </toRemove>
</conf>



Example: Only the tags specified right under the configuration files will be used in the configuration,
any child tags will be ignored, eg: <address> will be used in the configuration but its child tags <city> and <street>
will be ignored:

<conf>
    <toKeep>
        <address>
            <city></city>
            <street></street>
        </address>
    </toKeep>

    <toRemove>
    </toRemove>
</conf>

If you want to use <city> and <street> also in the configuration then specify them right under <toKeep>:

<conf>
    <toKeep>
        <address></address>
        <city></city>
        <street></street>        
    </toKeep>

    <toRemove>
    </toRemove>
</conf>



Example: <toKeep> has priority over <toRemove>:

<conf>
    <toKeep>
        <address></address>
        <city></city>     
    </toKeep>

    <toRemove>
        <city></city>               <!-- Will not be deleted as <toKeep> has priority over <toRemove> -->
    </toRemove>

    <toKeep>
        <street></street>           <!-- Only this tag will be removed, if found -->
    </toKeep>
</conf>



Example: An empty configuration XML file is valid but useless:

<conf>
</conf>




**************************
4. Interpret the output
**************************

The XmlDiff output contains only tags and attributes that have CHANGED, are NEW,
DELETED or have been marked to be kept in the configuration file.

If some tags/attributes are not marked in the output, it means that they did not changed
but have been marked to be kept in the configuration file.

These changes are marked by introducing an extra attribute named:
 - "mod" for tags
 - "mod_attributeName" for attributes
 so it can be clear which XML element they mark.

 These "mod" attributes will hold the modification type: CHANGED, NEW or DELETED.



Example:

old.xml:
<address valid="true">
    <city> New York </city>
    <street> Broadway 260 </street>
</address>


new.xml:
<address valid="false">
    <street> Broadway 260 </street>
</address>


XmlDiff's output:
<address mod="CHANGED" valid="false" mod_valid="CHANGED">
    <city mod="DELETED"> New York </city>
</address>
