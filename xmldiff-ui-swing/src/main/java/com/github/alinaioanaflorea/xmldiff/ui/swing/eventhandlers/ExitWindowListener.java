/*
Copyright (C) 2012 Alina Ioana Florea (alina.ioana.florea@gmail.com)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

http://www.opensource.org/licenses/mit-license.php
*/

package com.github.alinaioanaflorea.xmldiff.ui.swing.eventhandlers;

import static com.github.alinaioanaflorea.xmldiff.ui.swing.common.Utilities.*;

import com.github.alinaioanaflorea.xmldiff.ui.swing.GUI;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;
import javax.swing.BorderFactory;
import java.awt.BorderLayout;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

/**
 *  This class opens a new window which gives the user the option to clean the files generated by XmlDiff on his/her machine
 */
public class ExitWindowListener implements WindowListener
{
    // The GUI that triggered this event
    private GUI gui = GUI.getGui();

    private static final String NAME_WINDOW_CLEANUP = "XmlDiff - clean up";
    private static final String MSG_WINDOW_CLEANUP = "Delete the files generated by XmlDiff on your machine?";
    private static final String NAME_BUTTON_YES = "Yes";
    private static final String NAME_BUTTON_NO = "No";

    /**
     * Ctor
     * @param gui The GUI that triggered this event
     */
    public ExitWindowListener(GUI gui) {

        this.gui = gui;
    }

    @Override
    public void windowOpened(WindowEvent e) {}

    /*
     * Invoked when the user attempts to close the window
     * from the window's system menu.
     */
    @Override
    public void windowClosing(WindowEvent e) {

        gui.resetAllFieldStates();

        // Build a new window with cleanup options for the user
        JFrame window = new JFrame(NAME_WINDOW_CLEANUP);
        window.addWindowListener(new CloseAppListeners().new CloseAppWindowListener());

        // Fill the window's content
        JPanel msgPanel = new JPanel();
        msgPanel.setLayout(new BoxLayout(msgPanel, BoxLayout.Y_AXIS));
        msgPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        JLabel msg = new JLabel(MSG_WINDOW_CLEANUP);
        msgPanel.add(msg);
        window.getContentPane().add(BorderLayout.CENTER, msgPanel);

        JPanel buttonPanel = new JPanel();
        JButton yesButton = new JButton(NAME_BUTTON_YES);
        yesButton.addActionListener(new CleanUpActionListener(window));
        buttonPanel.add(yesButton);

        JButton noButton = new JButton(NAME_BUTTON_NO);
        noButton.addActionListener(new CloseAppListeners().new CloseAppActionListener());
        buttonPanel.add(noButton);
        window.getContentPane().add(BorderLayout.SOUTH, buttonPanel);

        // Window settings
        window.setSize(400, 200); // width, height
        window.setResizable(true);
        window.setIconImage(IMG_XMLDIFF_LOGO);
        SwingUtilities.updateComponentTreeUI(window);
        window.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        window.setVisible(true);
    }

    /*
     * Invoked when a window has been closed as the result
     * of calling dispose on the window.
     */
    @Override
    public void windowClosed(WindowEvent e) {}

    @Override
    public void windowIconified(WindowEvent e) {}

    @Override
    public void windowDeiconified(WindowEvent e) {}

    @Override
    public void windowActivated(WindowEvent e) {}

    @Override
    public void windowDeactivated(WindowEvent e) {}
}
